package apiserver

import (
	"fmt"
	"log"
	"net/http"
	"github.com/amyu98/go-lak/src/gamehandler"
	"github.com/d4l3k/go-pry/pry"
)

func Run() {
	http.HandleFunc("/", rootHandler)
	log.Fatal(http.ListenAndServe(":8080", nil))
}

func rootHandler(w http.ResponseWriter, r *http.Request) {
	enableCors(&w)
	path := r.URL.Path
	pry.Apply(&pry.Scope{Vals:map[string]interface{}{ "Run": Run, "rootHandler": rootHandler, "w": w, "r": r, "path": path, "fmt": pry.Package{Name: "fmt", Functions: map[string]interface{}{"Errorf": fmt.Errorf,"Fprintln": fmt.Fprintln,"Fprintf": fmt.Fprintf,"Appendln": fmt.Appendln,"Println": fmt.Println,"Sprintln": fmt.Sprintln,"Append": fmt.Append,"Fprint": fmt.Fprint,"Print": fmt.Print,"Printf": fmt.Printf,"Sprintf": fmt.Sprintf,"Appendf": fmt.Appendf,"Sprint": fmt.Sprint,"Scan": fmt.Scan,"Sscanln": fmt.Sscanln,"Fscanln": fmt.Fscanln,"Scanln": fmt.Scanln,"Sscanf": fmt.Sscanf,"Scanf": fmt.Scanf,"Sscan": fmt.Sscan,"Fscan": fmt.Fscan,"Fscanf": fmt.Fscanf,}}, "log": pry.Package{Name: "log", Functions: map[string]interface{}{"Default": log.Default,"Flags": log.Flags,"Printf": log.Printf,"Llongfile": log.Llongfile,"Writer": log.Writer,"Println": log.Println,"Ldate": log.Ldate,"LUTC": log.LUTC,"Prefix": log.Prefix,"SetPrefix": log.SetPrefix,"Output": log.Output,"Lmsgprefix": log.Lmsgprefix,"SetOutput": log.SetOutput,"Fatalln": log.Fatalln,"Panic": log.Panic,"Panicln": log.Panicln,"Logger": pry.Type(log.Logger{}),"New": log.New,"SetFlags": log.SetFlags,"Fatal": log.Fatal,"Print": log.Print,"Fatalf": log.Fatalf,"Ltime": log.Ltime,"LstdFlags": log.LstdFlags,"Lmicroseconds": log.Lmicroseconds,"Lshortfile": log.Lshortfile,"Panicf": log.Panicf,}}, "http": pry.Package{Name: "http", Functions: map[string]interface{}{"Get": http.Get,"Post": http.Post,"Client": pry.Type(http.Client{}),"ErrUseLastResponse": http.ErrUseLastResponse,"Head": http.Head,"PostForm": http.PostForm,"DefaultClient": http.DefaultClient,"SameSite": pry.Type(http.SameSite(0)),"SameSiteLaxMode": http.SameSiteLaxMode,"SetCookie": http.SetCookie,"SameSiteStrictMode": http.SameSiteStrictMode,"Cookie": pry.Type(http.Cookie{}),"SameSiteDefaultMode": http.SameSiteDefaultMode,"SameSiteNoneMode": http.SameSiteNoneMode,"NewFileTransport": http.NewFileTransport,"ServeFile": http.ServeFile,"ServeContent": http.ServeContent,"FS": http.FS,"FileServer": http.FileServer,"Dir": pry.Type(http.Dir("")),"Header": pry.Type(http.Header(map[string][]string(nil))),"CanonicalHeaderKey": http.CanonicalHeaderKey,"ParseTime": http.ParseTime,"NoBody": http.NoBody,"PushOptions": pry.Type(http.PushOptions{}),"MethodGet": http.MethodGet,"MethodPut": http.MethodPut,"MethodPatch": http.MethodPatch,"MethodDelete": http.MethodDelete,"MethodOptions": http.MethodOptions,"MethodHead": http.MethodHead,"MethodPost": http.MethodPost,"MethodConnect": http.MethodConnect,"MethodTrace": http.MethodTrace,"NewRequestWithContext": http.NewRequestWithContext,"ReadRequest": http.ReadRequest,"ErrNoCookie": http.ErrNoCookie,"ErrMissingBoundary": http.ErrMissingBoundary,"ErrNotSupported": http.ErrNotSupported,"ErrUnexpectedTrailer": http.ErrUnexpectedTrailer,"ErrShortBody": http.ErrShortBody,"ErrMissingContentLength": http.ErrMissingContentLength,"Request": pry.Type(http.Request{}),"ProtocolError": pry.Type(http.ProtocolError{}),"ErrNotMultipart": http.ErrNotMultipart,"NewRequest": http.NewRequest,"MaxBytesError": pry.Type(http.MaxBytesError{}),"ErrMissingFile": http.ErrMissingFile,"ParseHTTPVersion": http.ParseHTTPVersion,"ErrHeaderTooLong": http.ErrHeaderTooLong,"MaxBytesReader": http.MaxBytesReader,"Response": pry.Type(http.Response{}),"ErrNoLocation": http.ErrNoLocation,"ReadResponse": http.ReadResponse,"ServerContextKey": http.ServerContextKey,"Handle": http.Handle,"StateNew": http.StateNew,"DefaultServeMux": http.DefaultServeMux,"Redirect": http.Redirect,"ErrHijacked": http.ErrHijacked,"Error": http.Error,"StateHijacked": http.StateHijacked,"MaxBytesHandler": http.MaxBytesHandler,"StateActive": http.StateActive,"ListenAndServeTLS": http.ListenAndServeTLS,"LocalAddrContextKey": http.LocalAddrContextKey,"NewServeMux": http.NewServeMux,"StateIdle": http.StateIdle,"ErrWriteAfterFlush": http.ErrWriteAfterFlush,"TimeFormat": http.TimeFormat,"TrailerPrefix": http.TrailerPrefix,"ErrAbortHandler": http.ErrAbortHandler,"ServeMux": pry.Type(http.ServeMux{}),"RedirectHandler": http.RedirectHandler,"ErrContentLength": http.ErrContentLength,"StripPrefix": http.StripPrefix,"ErrBodyNotAllowed": http.ErrBodyNotAllowed,"AllowQuerySemicolons": http.AllowQuerySemicolons,"NotFoundHandler": http.NotFoundHandler,"TimeoutHandler": http.TimeoutHandler,"DefaultMaxHeaderBytes": http.DefaultMaxHeaderBytes,"ErrHandlerTimeout": http.ErrHandlerTimeout,"Server": pry.Type(http.Server{}),"ConnState": pry.Type(http.ConnState(0)),"NotFound": http.NotFound,"ErrServerClosed": http.ErrServerClosed,"StateClosed": http.StateClosed,"ServeTLS": http.ServeTLS,"ListenAndServe": http.ListenAndServe,"HandleFunc": http.HandleFunc,"Serve": http.Serve,"DetectContentType": http.DetectContentType,"StatusHTTPVersionNotSupported": http.StatusHTTPVersionNotSupported,"StatusCreated": http.StatusCreated,"StatusUnauthorized": http.StatusUnauthorized,"StatusRequestTimeout": http.StatusRequestTimeout,"StatusPreconditionFailed": http.StatusPreconditionFailed,"StatusUnavailableForLegalReasons": http.StatusUnavailableForLegalReasons,"StatusNetworkAuthenticationRequired": http.StatusNetworkAuthenticationRequired,"StatusMultiStatus": http.StatusMultiStatus,"StatusSeeOther": http.StatusSeeOther,"StatusProxyAuthRequired": http.StatusProxyAuthRequired,"StatusNotImplemented": http.StatusNotImplemented,"StatusBadGateway": http.StatusBadGateway,"StatusPartialContent": http.StatusPartialContent,"StatusMethodNotAllowed": http.StatusMethodNotAllowed,"StatusNotAcceptable": http.StatusNotAcceptable,"StatusContinue": http.StatusContinue,"StatusFound": http.StatusFound,"StatusUnprocessableEntity": http.StatusUnprocessableEntity,"StatusPreconditionRequired": http.StatusPreconditionRequired,"StatusInsufficientStorage": http.StatusInsufficientStorage,"StatusEarlyHints": http.StatusEarlyHints,"StatusAlreadyReported": http.StatusAlreadyReported,"StatusLengthRequired": http.StatusLengthRequired,"StatusRequestedRangeNotSatisfiable": http.StatusRequestedRangeNotSatisfiable,"StatusRequestHeaderFieldsTooLarge": http.StatusRequestHeaderFieldsTooLarge,"StatusMultipleChoices": http.StatusMultipleChoices,"StatusForbidden": http.StatusForbidden,"StatusVariantAlsoNegotiates": http.StatusVariantAlsoNegotiates,"StatusSwitchingProtocols": http.StatusSwitchingProtocols,"StatusProcessing": http.StatusProcessing,"StatusServiceUnavailable": http.StatusServiceUnavailable,"StatusText": http.StatusText,"StatusTemporaryRedirect": http.StatusTemporaryRedirect,"StatusPaymentRequired": http.StatusPaymentRequired,"StatusConflict": http.StatusConflict,"StatusUnsupportedMediaType": http.StatusUnsupportedMediaType,"StatusFailedDependency": http.StatusFailedDependency,"StatusNotExtended": http.StatusNotExtended,"StatusLocked": http.StatusLocked,"StatusUpgradeRequired": http.StatusUpgradeRequired,"StatusTeapot": http.StatusTeapot,"StatusTooManyRequests": http.StatusTooManyRequests,"StatusAccepted": http.StatusAccepted,"StatusUseProxy": http.StatusUseProxy,"StatusGone": http.StatusGone,"StatusRequestEntityTooLarge": http.StatusRequestEntityTooLarge,"StatusExpectationFailed": http.StatusExpectationFailed,"StatusRequestURITooLong": http.StatusRequestURITooLong,"StatusGatewayTimeout": http.StatusGatewayTimeout,"StatusResetContent": http.StatusResetContent,"StatusIMUsed": http.StatusIMUsed,"StatusMovedPermanently": http.StatusMovedPermanently,"StatusBadRequest": http.StatusBadRequest,"StatusNotFound": http.StatusNotFound,"StatusOK": http.StatusOK,"StatusNonAuthoritativeInfo": http.StatusNonAuthoritativeInfo,"StatusNotModified": http.StatusNotModified,"StatusMisdirectedRequest": http.StatusMisdirectedRequest,"StatusTooEarly": http.StatusTooEarly,"StatusNoContent": http.StatusNoContent,"StatusPermanentRedirect": http.StatusPermanentRedirect,"StatusLoopDetected": http.StatusLoopDetected,"StatusInternalServerError": http.StatusInternalServerError,"ErrLineTooLong": http.ErrLineTooLong,"ErrBodyReadAfterClose": http.ErrBodyReadAfterClose,"ErrSkipAltProtocol": http.ErrSkipAltProtocol,"ProxyFromEnvironment": http.ProxyFromEnvironment,"DefaultTransport": http.DefaultTransport,"DefaultMaxIdleConnsPerHost": http.DefaultMaxIdleConnsPerHost,"Transport": pry.Type(http.Transport{}),"ProxyURL": http.ProxyURL,}}, "gamehandler": pry.Package{Name: "gamehandler", Functions: map[string]interface{}{"PossibleMovesByCell": gamehandler.PossibleMovesByCell,"MovePiece": gamehandler.MovePiece,"NewGame": gamehandler.NewGame,"PossibleMoves": gamehandler.PossibleMoves,}}, "pry": pry.Package{Name: "pry", Functions: map[string]interface{}{"Fuzz": pry.Fuzz,"Len": pry.Len,"InterpretError": pry.Type(pry.InterpretError{}),"Append": pry.Append,"Make": pry.Make,"Close": pry.Close,"Highlight": pry.Highlight,"JSImporter": pry.Type(pry.JSImporter{}),"Scope": pry.Type(pry.Scope{}),"ErrBranchBreak": pry.ErrBranchBreak,"ErrBranchContinue": pry.ErrBranchContinue,"Defer": pry.Type(pry.Defer{}),"NewScope": pry.NewScope,"Func": pry.Type(pry.Func{}),"StringToType": pry.StringToType,"ValuesToInterfaces": pry.ValuesToInterfaces,"ErrChanSendFailed": pry.ErrChanSendFailed,"NewHistory": pry.NewHistory,"Package": pry.Type(pry.Package{}),"Pry": pry.Pry,"Apply": pry.Apply,"ErrChanRecvInSelect": pry.ErrChanRecvInSelect,"ErrDivisionByZero": pry.ErrDivisionByZero,"DeAssign": pry.DeAssign,"ComputeBinaryOp": pry.ComputeBinaryOp,"ErrChanRecvFailed": pry.ErrChanRecvFailed,"Type": pry.Type,}}, }})
	fmt.Fprintf(w, "Hello, %q", r.URL.Path)
	switch path {
	case "/api/v1":
		control(w, r)
	}
	w.Header().Set("Content-Type", "application/json")
}

func enableCors(w *http.ResponseWriter) {
	(*w).Header().Set("Content-Type", "text/html; charset=utf-8")
	(*w).Header().Set("Access-Control-Allow-Origin", "*")
	(*w).Header().Set("Access-Control-Allow-Methods", "POST, GET, OPTIONS, PUT, DELETE")
	(*w).Header().Set("Access-Control-Allow-Headers", "Accept, Content-Type, Content-Length, Accept-Encoding, X-CSRF-Token, Authorization")
}

func control(w http.ResponseWriter, r *http.Request) {
	fmt.Fprintf(w, "Hello, %q", r.URL.Path)
	switch "case" {
	case "/new_game":
		gamehandler.NewGame(w, r)
	case "/possible_moves":
		gamehandler.PossibleMoves(w, r)
	case "/move_piece":
		gamehandler.MovePiece(w, r)
	}
}
